<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2013-08-31T09:52:00Z</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Dev Bootcamp, Reconsidered</title>
    <link rel="alternate" href="/Dev-bootcamp-reconsidered/"/>
    <id>/Dev-bootcamp-reconsidered/</id>
    <published>2013-08-31T09:52:00Z</published>
    <updated>2013-08-31T09:52:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;In January of 2013, I applied to Dev Bootcamp. To make a &lt;a href="http://fajitanachos.com/Dev-Bootcamp"&gt;long story&lt;/a&gt; short, I&amp;#39;ve been accepted into the October 7th cohort. It&amp;#39;s a great opportunity for me to become a full-time developer, but two weeks ago I decided not to attend.&lt;/p&gt;

&lt;h2&gt;Why Dev Bootcamp?&lt;/h2&gt;

&lt;p&gt;When I first applied to Dev Bootcamp, I had &lt;a href="https://github.com/FajitaNachos/Quick-Preview"&gt;one project&lt;/a&gt; under my belt, and this blog was only a few months old. I didn&amp;#39;t know very much, but I knew I liked what I was doing. I would write some code, break something, Google it, and learn about it. Rinse and repeat. My initial thoughts about Dev Bootcamp were something along the lines of this: &lt;/p&gt;

&lt;p&gt;&amp;quot;I&amp;#39;ll go in as a beginner, come out with some chops, and then maybe I can get a job.&amp;quot; &lt;/p&gt;

&lt;p&gt;Dev Bootcamp started the programming bootcamp movement. It&amp;#39;s the most reputable, well-established program out there and I applied there for one reason: to get a job.&lt;/p&gt;

&lt;h2&gt;Why not Dev Bootcamp?&lt;/h2&gt;

&lt;p&gt;I&amp;#39;ve come a long way from the day I first applied, and I&amp;#39;ll be the first to admit that I still have a lot to learn. Despite that, I&amp;#39;m leaps and bounds ahead of where I was when I started. I&amp;#39;ve been doing this, day in and day out, for the last 14 months. Before that, I had made a couple of one-off websites. I think the optimal time for me to go through the program was probably 9 months ago. I&amp;#39;m sure I would still learn a lot, but the risk/reward has shifted in favor of me going forward on my own. &lt;/p&gt;

&lt;h2&gt;What are my options, Doc?&lt;/h2&gt;

&lt;p&gt;I&amp;#39;ve already paid the 11k. $1,000 of which is a non-refundable deposit. I&amp;#39;m budgeting $3,000 a month for living expenses (for two people). I&amp;#39;ve never lived in San Francisco, but for two people I think that&amp;#39;s fair.&lt;/p&gt;

&lt;h3&gt;Option 1&lt;/h3&gt;

&lt;p&gt;Dev Bootcamp is a 9 week program (with an optional 3 weeks at the end). I can realistically expect it to take anywhere from 3 to 12 weeks to find a job after the program is over. Living expenses + tuition add up to $17,000 on the low end and $26,000 on the higher side of things. The latter part of that scenario isn&amp;#39;t pretty. &lt;/p&gt;

&lt;h3&gt;Option 2&lt;/h3&gt;

&lt;p&gt;I don&amp;#39;t go through Dev Bootcamp, and I find a job on my own. I&amp;#39;ll get $10,000 back from Dev Bootcamp, which I&amp;#39;ll use to pay for two months worth of living expenses in San Francisco. The total cost is a much more reasonable $6,000, plus the nine weeks of time. I think I&amp;#39;ve learned enough over the last 14 months to get a job as an entry level developer. If I&amp;#39;m wrong, I&amp;#39;ll be out 6k and I&amp;#39;ll know I gave it my best shot. Then I&amp;#39;ll pack my bags, head for the mountains, and become a ski bum (who codes nights and weekends). &lt;/p&gt;

&lt;p&gt;Just kidding...kinda. &lt;/p&gt;

&lt;h2&gt;Three Things I Know and Two I Don&amp;#39;t&lt;/h2&gt;

&lt;h3&gt;Things I know going forward:&lt;/h3&gt;

&lt;p&gt;I love to learn, and I&amp;#39;m constantly striving to become a better developer. Day in. Day out. &lt;/p&gt;

&lt;p&gt;I&amp;#39;ve been writing code every day for over a year. I can count on two hands how many days have gone by where I haven&amp;#39;t written a single line of code. &lt;/p&gt;

&lt;p&gt;I need a job.&lt;/p&gt;

&lt;h3&gt;Things I don&amp;#39;t know:&lt;/h3&gt;

&lt;p&gt;If anyone wants to hire me. &lt;/p&gt;

&lt;p&gt;Lots more stuff. &lt;/p&gt;

&lt;h2&gt;A Word on Bootcamps in General&lt;/h2&gt;

&lt;p&gt;To my knowledge, Dev Bootcamp was the first bootcamp-style immersive program. A few students from their first cohort ended up starting their own schools. Now, there&amp;#39;s a programming bootcamp coming to every major city near you. They&amp;#39;re popping up everywhere. &lt;/p&gt;

&lt;p&gt;There&amp;#39;s a whole movement for people learning to code. I think people should learn to code, if only so they have a better understanding of how things work. I avidly believe that coding should be taught in schools, starting in elementary. But, just because it&amp;#39;s taught in schools doesn&amp;#39;t mean we all need to become programmers. Math is taught in school but I don&amp;#39;t want to be a mathematician. I can write, but that doesn&amp;#39;t mean I want to be a writer. Someone can learn to code, but that doesn&amp;#39;t mean they want/need/have to be a programmer. &lt;/p&gt;

&lt;p&gt;This next part is pure speculation: I think the percentage of people graduating from these programs and getting jobs is probably dropping. Dev Bootcamp put up some amazing numbers last year, but they haven&amp;#39;t released any since then. I honestly hope they&amp;#39;ve just switched to only reporting yearly job placement rates, and 85% of their students are still scoring jobs. I want them to succeed. I&amp;#39;m less concerned about Dev Bootcamp than I am about some of the schools that came after them. I can&amp;#39;t help but think a lot of these other programs are just looking to ride the wave, take in the tuition, and crank out students who may or may not be adequately prepared. &lt;/p&gt;

&lt;h2&gt;What&amp;#39;s next?&lt;/h2&gt;

&lt;p&gt;I don&amp;#39;t know. We&amp;#39;ve rented an apartment in San Francisco for the month of October. If we like it there, we&amp;#39;ll stay longer. If we don&amp;#39;t, then the options are limitless. I couldn&amp;#39;t say that before.&lt;/p&gt;

&lt;p&gt;See you in San Francisco. &lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Goodbye Jekyll</title>
    <link rel="alternate" href="/Goodbye-jekyll/"/>
    <id>/Goodbye-jekyll/</id>
    <published>2013-08-10T09:04:00Z</published>
    <updated>2013-08-10T09:04:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;&lt;center&gt;&lt;em&gt;This post is about moving my blog from Jekyll to Middleman.&lt;/em&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;About a week ago, I was in the throws of one of my recent projects. I was running into the web developer&amp;#39;s equivalent of writer&amp;#39;s block. Is there a name for that? I decided to take a short break and try my hand at a couple of other things. I wrote a &lt;a href="http://fajitanachos.com/minesweeper"&gt;Minesweeper&lt;/a&gt; clone in JQuery (blog post forthcoming), and my local Hacker News meetup had talked about redesigning their site so I played around with a few APIs and came up with &lt;a href="http://hnksansai.org"&gt;this&lt;/a&gt;.  While I was talking to one of the organizers, he suggested that I have a look at Middleman. Thank you &lt;a href="http://sachagreif.com/"&gt;Sacha&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;&lt;a href="http://middlemanapp.com"&gt;Middleman&lt;/a&gt; is a static site generator just like Jekyll. With Jekyll being the default static site generator for GitHub Pages, I wasn&amp;#39;t sure if I could make GitHub and Middleman play nicely together. Luckily, there&amp;#39;s a nice deployment extension for Middleman which, combined with a little git branch rearranging, works just fine. So what follows is a thoroughly incomplete and off the top of my head rendition of how to turn a Jekyll site into a Middleman site, and keep it hosted on GitHub pages. Please enjoy. &lt;/p&gt;

&lt;p&gt;First, make a copy of your current Jekyll site and put it somewhere safe. You know, just in case... &lt;/p&gt;

&lt;p&gt;Then set up a new project directory and install Middleman.&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;mkdir FajitaNachos
&lt;span class="gp"&gt;$ &lt;/span&gt;gem install middleman
&lt;span class="gp"&gt;$ &lt;/span&gt;gem install middleman-blog
&lt;span class="gp"&gt;$ &lt;/span&gt;middleman init FajitaNachos --template&lt;span class="o"&gt;=&lt;/span&gt;blog
&lt;/pre&gt;
&lt;p&gt;Let&amp;#39;s have a look at our new diggs. &lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;FajitaNachos
&lt;span class="gp"&gt;$ &lt;/span&gt;sublime .
&lt;/pre&gt;
&lt;p&gt;You should have a source/ directory, which is where we will be doing the majority of our work. Middleman takes whatever you have in your source/ directory, runs it through the generator, and spits out a static site into the /build directory. The &amp;#39;sublime&amp;#39; command is an alias I have set up for Sublime Text 2. I think most people use &amp;#39;subl&amp;#39; but I prefer the full name. Open your config.rb file and have a look at the options inside the activate :blog block. Here is what mine looks like (Yours will probably differ.) &lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="c1"&gt;#config.rb&lt;/span&gt;

&lt;span class="n"&gt;activate&lt;/span&gt; &lt;span class="ss"&gt;:blog&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;blog&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="c1"&gt;#blog.prefix = &amp;quot;posts&amp;quot;&lt;/span&gt;
  &lt;span class="n"&gt;blog&lt;/span&gt;&lt;span class="nf"&gt;.permalink&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;:title.html&amp;quot;&lt;/span&gt;
  &lt;span class="n"&gt;blog&lt;/span&gt;&lt;span class="nf"&gt;.sources&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/posts/:year-:month-:day-:title.html&amp;quot;&lt;/span&gt;
  &lt;span class="c1"&gt;# blog.taglink = &amp;quot;tags/:tag.html&amp;quot;&lt;/span&gt;
  &lt;span class="c1"&gt;# blog.layout = &amp;quot;layout&amp;quot;&lt;/span&gt;
  &lt;span class="c1"&gt;# blog.summary_separator = /()/&lt;/span&gt;
  &lt;span class="c1"&gt;# blog.summary_length = 250&lt;/span&gt;
  &lt;span class="c1"&gt;# blog.year_link = &amp;quot;:year.html&amp;quot;&lt;/span&gt;
  &lt;span class="c1"&gt;# blog.month_link = &amp;quot;:year/:month.html&amp;quot;&lt;/span&gt;
  &lt;span class="c1"&gt;# blog.day_link = &amp;quot;:year/:month/:day.html&amp;quot;&lt;/span&gt;
  &lt;span class="c1"&gt;# blog.default_extension = &amp;quot;.markdown&amp;quot;&lt;/span&gt;
  &lt;span class="n"&gt;blog&lt;/span&gt;&lt;span class="nf"&gt;.tag_template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;tag.html&amp;quot;&lt;/span&gt;
  &lt;span class="n"&gt;blog&lt;/span&gt;&lt;span class="nf"&gt;.calendar_template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;calendar.html&amp;quot;&lt;/span&gt;
  &lt;span class="c1"&gt;# blog.paginate = true&lt;/span&gt;
  &lt;span class="c1"&gt;# blog.per_page = 10&lt;/span&gt;
  &lt;span class="c1"&gt;# blog.page_link = &amp;quot;page/:num&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;activate&lt;/span&gt; &lt;span class="ss"&gt;:directory_indexes&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;This line&lt;/p&gt;
&lt;pre class="highlight text"&gt;Activate :directory_indexes 
&lt;/pre&gt;
&lt;p&gt;takes all of your posts and puts them into their own directory with an index.html file. Basically you end up with pretty URLs like &lt;a href="http://fajitanachos.com/Friday-Night/"&gt;http://fajitanachos.com/Friday-Night/&lt;/a&gt;. If you want to use it, just be sure it&amp;#39;s below the activate :blog block. The default Middleman structure is to keep all of your posts in the root directory of your site. That seemed a little messy to me, and luckily it is easy to customize. In the snippet above you can see &lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="n"&gt;blog&lt;/span&gt;&lt;span class="nf"&gt;.sources&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/posts/whatever-format-you-want-here&amp;quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;This tells Middleman that all of my posts reside in the /posts/ directory. Set it and forget it. &lt;/p&gt;

&lt;p&gt;At this point, I would go ahead and copy all of your Jekyll posts into your new posts/ directory. Also, copy your _layouts into a new layouts/ directory. In fact, go ahead and move everything from your Jekyll site, into your new Middleman project. Depending on what your directory names are, you may need to tweak the settings in your new config.rb. Look for these lines&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="ss"&gt;:css_dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;css&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="ss"&gt;:js_dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;js&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="ss"&gt;:images_dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;images&amp;#39;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;And set those to the correct path names. Middleman has an asset pipeline that you should probably take advantage of. This post is long enough without diving into that, but if you are familiar with Ruby on Rails, then it shouldn&amp;#39;t be a problem. &lt;/p&gt;

&lt;h2&gt;Layouts&lt;/h2&gt;

&lt;p&gt;Layouts work almost the same way they did in Jekyll, although nested layouts are a little different. First, you&amp;#39;ll want to rename your layout.html.erb file to layout.erb. And wherever you had&lt;/p&gt;
&lt;pre class="highlight text"&gt;{{ content }}
&lt;/pre&gt;
&lt;p&gt;You will want to replace with &lt;/p&gt;
&lt;pre class="highlight text"&gt;&amp;lt;%= yield %&amp;gt;
&lt;/pre&gt;
&lt;p&gt;Here&amp;#39;s an example of a nested layout, post.erb, that I use for all my posts. The first line is the important part, with the regular yield statment coming where you wanted the content to be. I declare the layout in each post&amp;#39;s yaml front matter, which then renders the layout.erb, with this post.erb layout inside of it, and finally the post content where the yield block is below. &lt;/p&gt;
&lt;pre class="highlight erb"&gt;&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="n"&gt;wrap_layout&lt;/span&gt; &lt;span class="ss"&gt;:layout&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;post-wrap&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id =&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;post-header&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;id =&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;site-title&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href =&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;FajitaNachos&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id =&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;post-container&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;article&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;id =&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;post-title&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;current_page&lt;/span&gt;&lt;span class="nf"&gt;.title&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id =&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;post-content&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
             &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id =&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;post-nav&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; 
          &lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;current_page&lt;/span&gt;&lt;span class="nf"&gt;.previous_article&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;previous-post&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;link_to&lt;/span&gt; &lt;span class="n"&gt;current_page&lt;/span&gt;&lt;span class="nf"&gt;.previous_article.title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;current_page&lt;/span&gt;&lt;span class="nf"&gt;.previous_article&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt; 
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt; 
          &lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt; 
          &lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;current_page&lt;/span&gt;&lt;span class="nf"&gt;.next_article&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;next-post&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; 
              &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;link_to&lt;/span&gt; &lt;span class="n"&gt;current_page&lt;/span&gt;&lt;span class="nf"&gt;.next_article.title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;current_page&lt;/span&gt;&lt;span class="nf"&gt;.next_article&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt; 
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt; 
          &lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/article&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;h2&gt;Markdown and Front Matter&lt;/h2&gt;

&lt;p&gt;Both Jekyll and Middleman use markdown for your blog posts, and yaml front matter to handle things like titles and tags. You shouldn&amp;#39;t have to do anything here. Your posts should work right out of the box assuming you&amp;#39;ve referenced your image directories properly.&lt;/p&gt;

&lt;h2&gt;Removing Jekyll Specific Code&lt;/h2&gt;

&lt;p&gt;As I mentioned earlier, Middleman uses Ruby syntax so you can do all sorts of nifty things like &lt;/p&gt;
&lt;pre class="highlight erb"&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;link_to&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Fajita Nachos&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://fajitanachos.com&amp;#39;&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;

&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="n"&gt;link_to&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://fajitanachos.com&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;image_tag&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;my_super_awesome_logo.png&amp;#39;&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;However, that also means that your previous Jekyll syntax won&amp;#39;t work. Things like &lt;/p&gt;
&lt;pre class="highlight html"&gt;{% for post in site.posts %}
  &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class =&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;post-item&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{ post.url }}&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;{{ post.title }}&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class =&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;post-date&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;{{ post.date | date: &amp;quot;%B %e, %Y&amp;quot; }}&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt; 
  &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
{% endfor %}
&lt;/pre&gt;
&lt;p&gt;Will need to be replaced with &lt;/p&gt;
&lt;pre class="highlight erb"&gt;&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="n"&gt;blog&lt;/span&gt;&lt;span class="nf"&gt;.articles.each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class =&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;post-item&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;link_to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="nf"&gt;.title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="nf"&gt;.url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class =&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;post-date&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="nf"&gt;.date.strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;%b %e, %Y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Also worth mentioning is that common site references in Jekyll are different in Middleman, for example&lt;/p&gt;
&lt;pre class="highlight html"&gt;{{site.title}} 
&lt;/pre&gt;
&lt;p&gt;will no longer work. Correcting all the syntax differences took a fair bit of time. &lt;/p&gt;

&lt;h2&gt;Syntax Highlighting&lt;/h2&gt;

&lt;p&gt;What&amp;#39;s a web development blog without syntax highlighting? It&amp;#39;s not hard to set up. I was already using Pygments with Jekyll so I decided to stick with that. Add this line to your Gemfile&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;middleman-syntax&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;redcarpet&amp;quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;And run &lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;bundle install
&lt;/pre&gt;
&lt;p&gt;In your config.rb file add&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="c1"&gt;#config.rb&lt;/span&gt;

&lt;span class="n"&gt;activate&lt;/span&gt; &lt;span class="ss"&gt;:syntax&lt;/span&gt;
&lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="ss"&gt;:markdown_engine&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:redcarpet&lt;/span&gt;
&lt;span class="n"&gt;set&lt;/span&gt; &lt;span class="ss"&gt;:markdown&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;fenced_code_blocks: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;That&amp;#39;s it. Now you can use fenced code blocks like this&lt;/p&gt;
&lt;pre class="highlight text"&gt;```ruby
   #your code here
```
&lt;/pre&gt;
&lt;p&gt;You can manage the styling by adding a pygments.css file in your css/ directory and including it in your pages. &lt;/p&gt;

&lt;h2&gt;Drafts&lt;/h2&gt;

&lt;p&gt;I never really liked how the drafts feature worked in Jekyll. Maybe I was doing it wrong, but I had a seperate directory called _drafts/ where all my drafts resided. When I was done I would move it out of drafts and into _posts/. With Middleman, I find it much simpler to setup and maintain. In the front matter of your post, just add this line&lt;/p&gt;
&lt;pre class="highlight yaml"&gt;&lt;span class="s"&gt;published&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;false&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;And Middleman will ignore this post whenever it builds the site. &lt;/p&gt;

&lt;h2&gt;Testing Locally&lt;/h2&gt;

&lt;p&gt;After you have copied all your files and removed the Jekyll specific syntax, fire up a local sever to see what is broken. If it works on the first time, you&amp;#39;re a god. &lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;middleman
&lt;/pre&gt;
&lt;p&gt;Now you should have a local server up and running at localhost:4567.  If your image files aren&amp;#39;t showing up, try running&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;middleman build
&lt;/pre&gt;
&lt;h2&gt;Generating a Site Map (Bonus)&lt;/h2&gt;

&lt;p&gt;I wanted to generate a site map for my blog posts, but only based on the post&amp;#39;s title. Here&amp;#39;s what I came up with. In source/sitemap.xml.erb add these lines&lt;/p&gt;
&lt;pre class="highlight erb"&gt;&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="n"&gt;pages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;page_articles&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;urlset&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.sitemaps.org/schemas/sitemap/0.9&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="n"&gt;pages&lt;/span&gt;&lt;span class="nf"&gt;.each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nb"&gt;p&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;url&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;loc&amp;gt;&lt;/span&gt;http://yourblog.com&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt;&lt;span class="nb"&gt;p&lt;/span&gt;&lt;span class="nf"&gt;.url&lt;/span&gt;&lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;index.html&lt;span class="nt"&gt;&amp;lt;/loc&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;priority&amp;gt;&lt;/span&gt;0.7&lt;span class="nt"&gt;&amp;lt;/priority&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/url&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/urlset&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;h2&gt;Deploying&lt;/h2&gt;

&lt;p&gt;Now, we need to push this bad boy up to our GitHub Pages repo. This is assuming you have your repo at yourusername.github.io. For example, mine is fajitanachos.github.io. There&amp;#39;s a nice little gem called &lt;a href="http://rubygems.org/gems/middleman-deploy"&gt;middleman-deploy&lt;/a&gt; that we can use to push everything to GitHub. &lt;/p&gt;

&lt;p&gt;Add this to your Gemfile&lt;/p&gt;
&lt;pre class="highlight text"&gt;gem &amp;quot;middleman-deploy&amp;quot;
&lt;/pre&gt;
&lt;p&gt;Run &lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;bundle install
&lt;/pre&gt;
&lt;p&gt;Then open your config.rb and add these lines&lt;/p&gt;
&lt;pre class="highlight ruby"&gt;&lt;span class="n"&gt;activate&lt;/span&gt; &lt;span class="ss"&gt;:deploy&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;deploy&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;deploy&lt;/span&gt;&lt;span class="nf"&gt;.method&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;:git&lt;/span&gt;
  &lt;span class="n"&gt;deploy&lt;/span&gt;&lt;span class="nf"&gt;.build_before&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt; &lt;span class="c1"&gt;# default: false&lt;/span&gt;
  &lt;span class="n"&gt;deploy&lt;/span&gt;&lt;span class="nf"&gt;.branch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;master&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Be careful here. If you deploy as is, it will overwrite everything in your master branch. Trust me, I&amp;#39;m speaking from personal experience here. For me, it was important to maintain all my previous commit history. Here is what your two projects should currently look like.&lt;/p&gt;

&lt;p&gt;Old Jekyll project&lt;/p&gt;
&lt;pre class="highlight text"&gt;.git
.gitignore
&lt;/pre&gt;
&lt;p&gt;New Middleman project&lt;/p&gt;
&lt;pre class="highlight text"&gt;build/ 
source/ 
config.rb 
Gemfile 
Gemfile.lock 
README.md
 + any of your other old Jekyll files
&lt;/pre&gt;
&lt;p&gt;Next, I copied everything from my new Middleman project back into my old Jekyll site (which should only have your .git and .gitignore files). You still have that backup of your Jekyll site right?  My new structure looked like this&lt;/p&gt;

&lt;p&gt;Old Jekyll project directory&lt;/p&gt;
&lt;pre class="highlight text"&gt;.git (from your Jekyll site)
.gitignore (from your Jekyll site)
build/ 
source/ 
config.rb 
Gemfile 
Gemfile.lock 
README.md
&lt;/pre&gt;
&lt;p&gt;Then I added all of my new changes to my git working tree&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;git add -A
&lt;span class="gp"&gt;$ &lt;/span&gt;git commit -m &lt;span class="s2"&gt;&amp;quot;Switching to Middleman&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;# adding and removing lots of files here&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Now, all of my new changes are committed on my master branch and I still have the old history. However, whenever we deploy using the middleman-deploy gem, it&amp;#39;s going to push to master and overwrite all those commits. This is bad. One solution is to move everything out of your master branch, into a seperate branch, which I chose to call &amp;#39;source&amp;#39;.&lt;/p&gt;
&lt;pre class="highlight text"&gt;$ git branch source master
&lt;/pre&gt;
&lt;p&gt;This will move your master branch into a new source branch, and then you can check it out and push it to GitHub.&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;git checkout &lt;span class="nb"&gt;source&lt;/span&gt;
&lt;span class="gp"&gt;$ &lt;/span&gt;git push origin &lt;span class="nb"&gt;source&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;For personal and organization pages, GitHub only reads what&amp;#39;s in the master branch. Now that our old git history is safely stored in the source branch, we can deploy our Middleman site to our master branch. &lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;middleman deploy
&lt;/pre&gt;
&lt;p&gt;You should see something like this &lt;/p&gt;
&lt;pre class="highlight shell"&gt; run  middleman build from &lt;span class="s2"&gt;&amp;quot;.&amp;quot;&lt;/span&gt;

 //lots of stuff here

 &lt;span class="c"&gt;## Deploying via git to remote=&amp;quot;origin&amp;quot; and branch=&amp;quot;master&amp;quot;&lt;/span&gt;

&lt;/pre&gt;
&lt;p&gt;One last thing. Visit your repo on GitHub. The first thing you should see on your master branch are commit messages that look something like this.&lt;/p&gt;
&lt;pre class="highlight text"&gt;Automated commit at 2013-08-10 04:17:26 UTC by middleman-deploy 3.1.4
&lt;/pre&gt;
&lt;p&gt;This is normal, and ugly. Luckily, all of our old history is still intact on the source branch. Go into your repo settings and change the default branch to be source instead of master. So when you visit the repo, the first thing you will see is all of your commits and previous history instead of having to change branches to see it. &lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Now, you should be able to make any changes you want, in any directory of your new blog, and push it to the source branch of your repo with the proper commit messages. To deploy your blog run&lt;/p&gt;
&lt;pre class="highlight shell"&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;middleman deploy 
&lt;/pre&gt;
&lt;p&gt;and it will update the master branch and push it to GitHub. &lt;/p&gt;

&lt;p&gt;I know that I glossed over some things here and there, but this is what stuck with me when I was moving from Jekyll to Middleman. If you have any questions, I&amp;#39;ll be happy to help via email. &lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Friday Night</title>
    <link rel="alternate" href="/Friday_night/"/>
    <id>/Friday_night/</id>
    <published>2013-07-19T00:00:00Z</published>
    <updated>2013-07-19T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;Right now, I&amp;#39;m on a train en route to Kyoto. Earlier today I started working on a user authentication system using &lt;a href="https://github.com/plataformatec/devise]"&gt;Devise&lt;/a&gt;. I&amp;#39;m currently reading through the docus to get a better feel for the features, implementation, etc... It&amp;#39;s Friday night, and I&amp;#39;m sifting through documentation on a Rails gem. &lt;/p&gt;

&lt;p&gt;And I&amp;#39;m loving it. &lt;/p&gt;

&lt;p&gt;Did you know that trains in Japan are quieter than most libraries in the U.S.? I shit you not. I can see 4 people sleeping, 3 people staring at their phones, 2 listening to music, and another staring out the window. I haven&amp;#39;t heard a single word in the last 20 minutes, save the train conductor over the intercom announcing the stops in a soothing voice, that borders on a whisper: &lt;/p&gt;

&lt;p&gt;&amp;quot;Otsu. Otsu desu.&amp;quot;&lt;/p&gt;

&lt;p&gt;It&amp;#39;s times like this when it hits me. I was meant to be a developer. When we get to Kyoto, I&amp;#39;ll go have a nice dinner with my wife. Then, tomorrow morning, I&amp;#39;ll get up early and get right back to it. I love doing this, day in and day out.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Dear Aspiring Developer</title>
    <link rel="alternate" href="/Dear-Aspiring-Developer/"/>
    <id>/Dear-Aspiring-Developer/</id>
    <published>2013-06-21T00:00:00Z</published>
    <updated>2013-06-21T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;It doesn&amp;#39;t matter what you did in a previous life. What matters is what you do today, and every day going forward. You want to be a developer. Awesome. &lt;/p&gt;

&lt;p&gt;Why? &lt;/p&gt;

&lt;p&gt;Because it pays well? Because you want to work at a start up? Because your mom said you are good at the interwebs? This isn&amp;#39;t going to be an easy process. It&amp;#39;s going to take a lot of hardwork and dedication from the beginning. I certainly don&amp;#39;t know everything, but as someone who is on the same path, I thought I would share some of the things I&amp;#39;ve done that have helped me along the way.&lt;/p&gt;

&lt;h2&gt;Number One&lt;/h2&gt;

&lt;p&gt;If you don&amp;#39;t have a project you&amp;#39;re currently working on, you should really find one. There will never be a magic time or place to get started. Today is better than tomorrow, which is better than the next day. It&amp;#39;s fine to start with a tutorial or a book, but you&amp;#39;ll learn a lot more from working on something that you are passionate about. Can&amp;#39;t find an idea? You&amp;#39;re probably not looking hard enough. Open your eyes and view every potential problem, inconvenience, or desire through the lens of it being your next project. Have an idea languishing in the back of your mind? Build it. I don&amp;#39;t care if it sucks. One shitty project is infinitely better than zero projects. If you aren&amp;#39;t actively working on something, anything, then you are doing yourself a huge disservice. &lt;/p&gt;

&lt;h2&gt;Number Two&lt;/h2&gt;

&lt;p&gt;You should to be writing code &lt;em&gt;every single day&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;As a general rule, the only two days I know I won&amp;#39;t be writing any code are my wife&amp;#39;s birthday and our anniversary. That&amp;#39;s it. If you aren&amp;#39;t in your text editor, making sweet passionate love to your keyboard day in and day out, then you&amp;#39;re doing it wrong. Every day you will get a little better. You&amp;#39;ll look back on things you did three months ago and cringe because you&amp;#39;ve gotten so much better. There will be small triumphs along the way, like when things &lt;a href="/It-just-worked"&gt;just work&lt;/a&gt;, and rest assured there will also be many failures. You&amp;#39;ll need to fight through the frustration, tediousness, and problems that you encounter along the way. And hopefully you&amp;#39;ll love doing it. &lt;/p&gt;

&lt;h2&gt;Number Three&lt;/h2&gt;

&lt;p&gt;You need a blog, no questions asked. I waited several months before I started this blog. That was a mistake. My reasoning was that I didn&amp;#39;t have anything to say. That was a pretty poor reason. You can write about your latest projects, things you&amp;#39;ve learned, or anything else that comes to mind. In fact, if you don&amp;#39;t already have a project you are working on, a blog is the perfect starter project. Spend some time thinking about the layout you want to use and then go build it. It took me too long to realize that it&amp;#39;s really not so much about what you write. Your blog/portfolio is your calling card. It&amp;#39;s the perfect opportunity to tell your story, and no one else is going to tell it for you. Tell me a story. &lt;/p&gt;

&lt;h2&gt;Number Four&lt;/h2&gt;

&lt;p&gt;Join &lt;a href="https://www.github.com"&gt;GitHub&lt;/a&gt;, write some code, and put it out there for the world to see. Forget about contributing to open source projects for now. There will come a time and place for that. Just get started with whatever you are working on. At first, you won&amp;#39;t understand why you even need version control. In time though, you&amp;#39;ll come to wonder how you ever lived without it. You can use git by itself, but GitHub makes it easier to manage and it&amp;#39;s the perfect platform for you to show others that you can, in fact, write code. As time goes on you&amp;#39;ll come across open source projects that pique your interest. When you do, take some time to contribute to them. &lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Dev Bootcamp</title>
    <link rel="alternate" href="/Dev-Bootcamp/"/>
    <id>/Dev-Bootcamp/</id>
    <published>2013-05-07T00:00:00Z</published>
    <updated>2013-05-07T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;&lt;center&gt;&lt;em&gt;This was previously 3 posts that have been combined into 1.&lt;/em&gt;&lt;/center&gt;&lt;/p&gt;

&lt;h2&gt;The Application - January 18, 2013&lt;/h2&gt;

&lt;p&gt;I just submitted my Dev Bootcamp application! If you don&amp;#39;t know what
&lt;a title="Dev Bootcamp" href="http://www.devbootcamp.com"&gt;Dev Bootcamp&lt;/a&gt;, click on that link and have a look around.&lt;/p&gt;

&lt;p&gt;I&amp;#39;m hoping to make a strong case, and with a little luck, get accepted into one 
of the fall/winter 2013 cohorts. I&amp;#39;m sure most 
applicants have thought to themselves &amp;quot;What if I shell out $12k and don&amp;#39;t get a 
job after the program is over...?&amp;quot;  I know I have. But that&amp;#39;s a risk I&amp;#39;m willing to 
take. This is an opportunity for me to exponentially increase how much I know 
about web development, meet some amazing people, and hopefully land a job as a 
developer after it&amp;#39;s all said and done. &lt;/p&gt;

&lt;p&gt;Yeah, I&amp;#39;m willing to take that risk.&lt;/p&gt;

&lt;p&gt;So, about the application. As of now, it consists of two parts. The first part is a series of questions about you, your background, and why you want to join Dev Bootcamp. For the second part they ask you to submit a video in which you A) tell a little about yourself and B) teach them something.&lt;/p&gt;

&lt;p&gt;I don&amp;#39;t know how Dev Bootcamp feels about me going through the full application (although anyone can sign up and see it) so I&amp;#39;ll just tell you about one question. I changed my answer to this 3 or 4 times and eventually settled on this.&lt;/p&gt;

&lt;p&gt;Q: &amp;quot;Tell us something surprising or amusing that you have discovered.&amp;quot;&lt;/p&gt;

&lt;p&gt;A: &amp;quot;Never tell a restaurant in Thailand that you &amp;quot;like spicy&amp;quot;...&lt;/p&gt;

&lt;p&gt;Quick back story: We went to Thailand and Malaysia over the Christmas holidays. Thai food is all around pretty amazing. One night we were at a restaurant and I asked our server if a dish was spicy. The server 
cocked her head to the side and said &amp;quot;a little spicy&amp;quot;. Well, I like spicy food 
and I didn&amp;#39;t want them to think otherwise. So, nodding my head with a big smile, I said &amp;quot;I like spicy.&amp;quot; Bad idea. Two bites in I was crying, sweating, and cursing myself all at the same time. &lt;/p&gt;

&lt;p&gt;Anyway, on to the video.&lt;/p&gt;

&lt;p&gt;The video was shot over two days. I went to Kyoto to film the first part with a 
friend. We went to Nanzen-ji Temple which is a great little spot. If you are ever in 
Kyoto, it&amp;#39;s worth checking out. My wife helped me film the second part in our 
apartment and at a restaurant down the street. We got there early and the place 
was pretty empty. I wanted to stay and catch more of the vibe but when every 
take you do costs you a beer, it gets expensive.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s the video.&lt;/p&gt;

&lt;iframe width="420" height="315" src="http://www.youtube.com/embed/ps5rRrIyrcI" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2&gt;The First Interview - March 15th, 2013&lt;/h2&gt;

&lt;p&gt;I applied to Dev Bootcamp in January of 2013. The day after I applied, I received an email to set up a time to interview. Sweet. The first available time slot was a month away, but unfotunately I had already made plans for that day. I ended up snagging a spot on March 5th, a little over 6 weeks later. I can be patient. No worries.&lt;/p&gt;

&lt;p&gt;February flew by and my interview arrived shortly thereafter. I was pumped. The interview was set for 2:00pm PST which was 7 am the next day for me. I woke up at 5:30 to make sure everything was in order and working properly. I decided to use my wife&amp;#39;s computer as my webcam occasionally decides to give me the middle finger and not cooperate.&lt;/p&gt;

&lt;p&gt;The appointed time rolled around and I found myself staring at Karim Bishay on the other end. A quick hello, how are you, and we were off. We started with questions from me. The ones I had prepared all of a sudden seemed ridiculous. They weren&amp;#39;t. I picked a select few and decided to skip the rest.  Next, Karim gave me a puzzle to work through. The exact question doesn&amp;#39;t matter, so I won&amp;#39;t share it here. He was more interested in my thought process than the actual solution. I made my way around to the right answer after a few nudges from Karim, but in hindsight I definitely should have done better. Just nerves I guess.&lt;/p&gt;

&lt;p&gt;Next, Karim typed a short code snippet into the Skype chat box and asked me to take a look at it. &lt;/p&gt;

&lt;p&gt;&amp;quot;Bear with me a second, I&amp;#39;m using my wife&amp;#39;s computer and can&amp;#39;t pull up the message.&amp;quot; I said, later realizing how dumb it sounded.&lt;/p&gt;

&lt;p&gt;He kindly reminded me that I could click on the bubble next to his name. You know, the spot where it notifies you in bright orange when someone has entered a message. Oops.&lt;/p&gt;

&lt;p&gt;The code snippet itself wasn&amp;#39;t difficult. It was the first time I had ever analyzed a piece of code with/for someone. I knew the answer, but I should have been more confident in expressing it.&lt;/p&gt;

&lt;p&gt;At the end we talked about a few other things and he recommended that I work through a Ruby tutorial to get a feel for things.&lt;/p&gt;

&lt;p&gt;Total time: 20 minutes&lt;/p&gt;

&lt;h2&gt;The Second Interview - March 15, 2013&lt;/h2&gt;

&lt;p&gt;After I completed the tutorial, I received an email to schedule a second interview. There was an opening the following week and I jumped on it. That interview was today. Well, it was supposed to be.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Anything that can go wrong, will—at the worst possible moment.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That&amp;#39;s Finagle&amp;#39;s corollary to [Murphy&amp;#39;s Law][1], and I know it&amp;#39;s cliche. I wouldn&amp;#39;t even bring it up if it didn&amp;#39;t &lt;em&gt;perfectly&lt;/em&gt; describe the situation in my apartment this morning. Short of a natural disaster, everything that could go wrong, did, and at the worst possible moment.&lt;/p&gt;

&lt;p&gt;20 minutes before the interview was scheduled to start, I fired up my computer and tried to log into Skype. I couldn&amp;#39;t connect. I tried my email next and quickly realized that our internet connection had gone south.&lt;/p&gt;

&lt;p&gt;&amp;quot;Not now..&amp;quot;&lt;/p&gt;

&lt;p&gt;The wifi in our apartment goes out on a semi-regular basis. I went back and forth with our internet provider when we first moved in but it didn&amp;#39;t help. Switching providers isn&amp;#39;t an option either. When it happens, I can usually get online with a wired connection. Not today though. I can recall that happening two times in the last year. Today makes #3. With time dwindling, I frantically tried to reset the router and modem. &lt;/p&gt;

&lt;p&gt;As our scheduled start time neared, and a solid internet connection was still no where to be found, I turned to plan B. My phone. I logged in to the Skype app and tried to shake the past 15 minutes off.&lt;/p&gt;

&lt;p&gt;A few minutes later, the call came in. I accepted, and the Skype app instantly crashed.&lt;/p&gt;

&lt;p&gt;Solid.&lt;/p&gt;

&lt;p&gt;I opened it back up and found a message from Karim.&lt;/p&gt;

&lt;p&gt;&amp;quot;Are you there?&amp;quot;&lt;/p&gt;

&lt;p&gt;I told him I was having some internet problems and I was on my phone. He replied, asking me to give him a call on his number. I tried calling his number from Skype, but I needed to have Skype credits. No dice, and making a 15-20 minute regular long distance call to SF isn&amp;#39;t cheap. I resorted to calling him from Google Talk. Two rings and he answered. A glimmer of hope. I finished my first sentence.&lt;/p&gt;

&lt;p&gt;&amp;quot;Sorry, Andrew. I can barely hear you.&amp;quot; &lt;/p&gt;

&lt;p&gt;I asked him if we could give Skype another shot. A last and desperate attempt. We got connected. I could hear him on the other end. &lt;/p&gt;

&lt;p&gt;&amp;quot;Hello? Andrew? You there?&amp;quot;  He couldn&amp;#39;t see or hear me. Game over.&lt;/p&gt;

&lt;p&gt;He sent me a nice message suggesting we reschedule for another day. I apologized for wasting his time and he sent back a reassuring message that everything was ok. At that point there was nothing more I could do.&lt;/p&gt;

&lt;p&gt;As you might surmise, my internet connection came back to life 5 minutes after we decided to reschedule. Go figure. Sometimes these things just happen. We&amp;#39;ve rescheduled the interview for April 5th. I&amp;#39;ve also purchased plenty of Skype credits to call him, should things go awry again. &lt;/p&gt;

&lt;p&gt;I&amp;#39;ll let you know how it turns out.&lt;/p&gt;

&lt;h2&gt;The Real Second Interview - April 5th, 2013&lt;/h2&gt;

&lt;p&gt;The night before my second interview, I resolved to make sure that things would go smoother than my last attempt. The interview was set for 7:30am, my time. I woke up at 5:30 to make sure our internet was cooperating and I didn&amp;#39;t need to come up with a back up plan. Fortunately, things went off without a hitch. &lt;/p&gt;

&lt;p&gt;The call from Karim came in a few minutes early and what I thought was just going to be a &amp;#39;fit&amp;#39; interview, was not. He asked me if I had any questions. I asked a few that I had skipped over in the previous interview, and then we dove into 3 or 4 small code snippets. I stumbled to express myself clearly one spot, but after I settled down, things went fine. I was a little surprised there weren&amp;#39;t any questions about me or my background. I don&amp;#39;t know if it&amp;#39;s the same for all interviews or that is just how mine went. &lt;/p&gt;

&lt;p&gt;Total time: 15 minutes&lt;/p&gt;

&lt;h2&gt;The Result - April 5th, 2013&lt;/h2&gt;

&lt;p&gt;Throughout the application process, I felt fairly confident about my application. I can&amp;#39;t say that is the norm for me. Six hours after I applied, a new message from Karim popped in my inbox. My confidence wavered a bit. &lt;/p&gt;

&lt;p&gt;No worries though, we&amp;#39;re San Francisco bound! I paid my deposit and was promptly placed in the October 2013 cohort. I can&amp;#39;t wait to meet my fellow aspiring devs. It&amp;#39;s going to be a great ride.&lt;/p&gt;

&lt;p&gt;Now, about that $12k...&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Hotfix</title>
    <link rel="alternate" href="/Hotfix/"/>
    <id>/Hotfix/</id>
    <published>2013-03-21T00:00:00Z</published>
    <updated>2013-03-21T00:00:00Z</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;One day at work I noticed I messed up the layout of this site with some changes 
I had made earlier that morning. Things looked fine on my laptop, but due to
different screen resolutions and an older browser, it looked pretty bad on my work computer. I wasn&amp;#39;t going to be home for another 6 hours and doing any kind of local
dev work on that computer was out of the question. I needed a simple way 
to make changes to my site using only a browser.&lt;/p&gt;

&lt;p&gt;And now I have one.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://chrome.google.com/webstore/detail/hotfix/bfmckmhcljhakgkngnfjhmmffaabdafi"&gt;Hotfix&lt;/a&gt; is a Chrome extension that I&amp;#39;ve been working on for the last month or so. 
It allows you to make changes in Chrome Developer Tools and push those changes directly to 
GitHub. No more saving locally and then committing later. You can edit the CSS and 
Javscript of your projects from anywhere at anytime.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s a brief demo of how the extension works. &lt;/p&gt;

&lt;iframe width="560" height="315" src="http://www.youtube.com/embed/ASRf2XC1wtU" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;I can now edit this site from anywhere with an 
internet connection, and see the changes reflected immediately. You should give it a test drive by downloading it from the Chrome Web Store or if you&amp;#39;re feeling frisky, why don&amp;#39;t you fork it on GitHub? &lt;/p&gt;

&lt;div class= "buttons-wrap"&gt;
    &lt;a href="https://chrome.google.com/webstore/detail/hotfix/bfmckmhcljhakgkngnfjhmmffaabdafi"&gt;&lt;span class="cws-link"&gt;Chrome Web Store&lt;/span&gt;&lt;/a&gt;
    &lt;a href="https://github.com/FajitaNachos/hotfix"&gt;&lt;span class="github-link"&gt;
    GitHub Repository&lt;/span&gt;&lt;/a&gt;
&lt;/div&gt;
</content>
  </entry>
</feed>
